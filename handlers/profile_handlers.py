#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
'''Profile Api handlers.'''#
import json
import uuid
import functools
import editdistance
import pylru
from flask import request, abort
import handlers.database_handlers as dh
#import extract_expertise

QUERIES = pylru.lrucache(100)

def submit_query():
    """Handler for submitting a query
       a query request is sent in the POST body
       generates the list of profiles to be stored in the QUERIES cache

       returns : a response object of the format
                    { success : boolean, results: uri string}
    """
    if request.is_json:
        request_json = defaultdict(lambda: '')
        request_json.update(request.get_json())
    else:
        return 'JSON, please.', 415

    # get profiles from data
    (profiles, status) = dh.find_profiles(request_json)

    if not status:
        # failed to find anything
        response = {'success': status, 'results': ''}
        return json.dumps(response)

    # add data urls
    for profile in profiles:
        person = '/api/person/{}/'.format(profile['id'])
        profile['research_summary'] = person + 'summary'
        profile['full_profile'] = person + 'full'
    
    # sort results by expertise (for now needs to be extended)
    expertise = request_json['expertise'] 
    results = _get_ordered_results(profiles, '', expertise)

    # add to query cache for lookup later
    query_id = str(uuid.uuid4())
    QUERIES[query_id] = profiles
    if query_id not in QUERIES:
        QUERIES[query_id] = []
    response = {
        'success': True,
        'results': '/api/query/{}'.format(query_id)
    }
    return json.dumps(response)

def get_query(query_id):
    """Gets the list of profiles generated by search_query()
        
       query_id : id of the query generated by search_query()
       
       returns : json representation of the queried list of profiles
    """
    if query_id in QUERIES:
        x = QUERIES[query_id]
        del QUERIES[query_id]
        return json.dumps(x)
    else:
        abort(404)

def person_summary(person_id):
    """Gets a quick summary of a persons profile
    
       person_id : the uid of the persons profile
       
       returns : json of a summary of the person_id
                 contains - papers, keywords, recent_paper, full_profile
    """
    (person, status) = dh.get_profile_by_id(person_id)
    if status:
        resp = { 'papers': len(person['papers'])
               , 'keywords': sorted(list(person['keywords'].keys()))
               , 'recent_paper': person['papers'][0]
               , 'full_profile': '/api/person/{}/full'.format(person['id'])
               }
        return json.dumps(resp)
    else:
        abort(404)

def person_full(person_id):
    """Gets the full profile of a persons profile
    
       person_id : the uid of the persons profile
       
       returns : json containing the entire profile
    """
    (person, status) = dh.get_profile_by_id(person_id)
    if status:
        return json.dumps(PROFILES[person_id])
    else:
        abort(404)


def _get_ordered_results(profiles, name, field):
    """Gets an ordered list of query results.

       profiles: the profile list to sort
       name: query name
       field: query field

       returns: an ordered list of query results
    """
    results = profiles.values() #extract profiles
    rank = functools.partial(_get_rank, name=name, field=field) #partially apply ranking function to query
    return sorted(results, key=rank, reverse=True) #sort profiles

def _get_rank(name, field, profile, name_weight=100):
    """Ranking function that gives a profile a rank on how well
       it matches a given query. Uses Levenshtein distance to compare
       name to query name.

       name: query name
       field: query field
       profile: profile to rank
       name_weight: scaling factor for the name comparison (100 for the moment)

       returns: an int value that represents how well a profile
                matches the query
    """
    name_rank = 0 if name == '' else -name_weight*editdistance.eval(name, profile['name'])
    try:
        field_rank = profile['keywords'][field]
    except:
        field_rank = 0
    return field_rank + name_rank
